{"version":3,"sources":["assets/scripts/Star.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA,oBAAoB;AACpB,wEAAwE;AACxE,mBAAmB;AACnB,kFAAkF;AAClF,8BAA8B;AAC9B,kFAAkF;AAE5E,IAAA,KAAsB,EAAE,CAAC,UAAU,EAAlC,OAAO,aAAA,EAAE,QAAQ,cAAiB,CAAC;AAG1C;IAAkC,wBAAY;IAA9C;QAAA,qEA+CC;QA5CG,gBAAU,GAAW,CAAC,CAAC,CAAC,2BAA2B;QAEnD,UAAI,GAAS,IAAI,CAAC;;IA0CtB,CAAC;IAxCG,wBAAwB;IAExB,eAAe;IAEf,oBAAK,GAAL;IAEA,CAAC;IAED,qBAAM,GAAN,UAAQ,EAAU;QACd,yBAAyB;QACzB,IAAI,IAAI,CAAC,iBAAiB,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE;YAC5C,OAAO;YACP,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,OAAO;SACV;QAED,0BAA0B;QAC1B,IAAM,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;QACnE,IAAM,UAAU,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC;IACnF,CAAC;IAED,gCAAiB,GAAjB;QACI,qBAAqB;QACrB,IAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;QAC5C,gBAAgB;QAChB,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;QACrD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,uBAAQ,GAAR;QACI,kCAAkC;QAClC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;QAEzB,mBAAmB;QACnB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;QAEtB,WAAW;QACX,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACxB,CAAC;IA3CD;QADC,QAAQ;4CACc;IAHN,IAAI;QADxB,OAAO;OACa,IAAI,CA+CxB;IAAD,WAAC;CA/CD,AA+CC,CA/CiC,EAAE,CAAC,SAAS,GA+C7C;kBA/CoB,IAAI","file":"","sourceRoot":"/","sourcesContent":["import Game from './Game';\n// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Star extends cc.Component {\n\n    @property\n    pickRadius: number = 0; // 星星和主角之间的距离小于这个数值时，就会完成收集\n\n    game: Game = null;\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    update (dt: number) {\n        // 每帧判断星星和主角之间的距离是否小于收集距离\n        if (this.getPlayerDistance() < this.pickRadius) {\n            // 收集星星\n            this.onPicked();\n            return;\n        }\n\n        // 根据 Game 脚本中的计时器更新星星的透明度\n        const opacityRatio = 1 - this.game.timer / this.game.startDuration;\n        const minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    }\n\n    getPlayerDistance (): number {\n        // 根据 Player 节点位置判断距离\n        const playerPos = this.game.player.position;\n        // 根据两点之间的位置计算距离\n        const dist = this.node.position.sub(playerPos).mag();\n        return dist;\n    }\n\n    onPicked () {\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\n        this.game.spawnNewStar();\n\n        // 调用 Game 脚本中的得分方法\n        this.game.gainScore();\n\n        // 销毁当前星星节点\n        this.node.destroy();\n    }\n}\n"]}