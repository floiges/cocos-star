{"version":3,"sources":["assets/scripts/Player.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n// 对于需要重复生成的节点，我们可以将它保存成 Prefab（预制） 资源，作为我们动态生成节点时使用的模板。\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Player extends cc.Component {\n\n    // Cocos Creator 规定一个节点具有的属性都需要写在 properties 代码块中，\n    // 这些属性将规定主角的移动方式，在代码中我们不需要关心这些数值是多少，因为我们之后会直接在 属性检查器 中设置这些数值\n\n    @property(cc.Label) // 使用 property 装饰器声明属性，括号里是属性类型，装饰器里的类型声明主要用于编辑器展示\n    label: cc.Label = null; // 这里是 TypeScript 用来声明变量类型的写法，冒号后面是属性类型，等号后面是默认值\n\n    @property\n    jumpHeight: number = 0; // 主角跳跃高度\n\n    @property\n    jumpDuration: number = 0; // 主角跳跃持续时间\n\n    @property\n    maxMoveSpeed: number = 0; // 最大移动速度\n\n    @property\n    accel: number = 0; // 加速度\n\n    @property(cc.AudioClip)\n    jumpAudio: cc.AudioClip = null; // 跳跃音效资源\n\n    // 加速度方向开关\n    accLeft: boolean = false;\n    accRight: boolean = false;\n    xSpeed: number = 0; // 主角当前水平方向速度\n\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // 在场景加载后立刻执行，所以初始化相关的操作和逻辑都会放在这里面\n    onLoad () {\n        const jumpAction = this.runJumpAction();\n        cc.tween(this.node).then(jumpAction).start();\n\n        // 初始化键盘输入监听\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n    }\n\n    start () {\n\n    }\n\n    // update 会在场景加载后每帧调用一次，我们一般把需要经常计算或及时更新的逻辑内容放在 update 中\n    update (dt: number) {\n        // 根据当前加速度方向，每帧更新速度\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n\n        // 限制主角的速度不能超过最大值\n        if (Math.abs(this.xSpeed) > this.maxMoveSpeed) {\n            // if speed reach limit, use max speed with current direction\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        // 根据当前速度更新主角的位置\n        this.node.x += this.xSpeed * dt;\n    }\n\n    onDestroy () {\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n    }\n\n    runJumpAction () {\n        // 这里涉及到了 缓动（cc.tween）系统，在 Cocos Creator 中，cc.tween 可以对任何对象进行操作，并且可以对对象的 任意属性 进行缓动\n        // 跳跃上升\n        const jumpUp = cc.tween().by(this.jumpDuration, { y: this.jumpHeight }, { easing: 'sineOut' });\n        // 下落\n        const jumpDown = cc.tween().by(this.jumpDuration, { y: -this.jumpHeight }, { easing: 'sineIn' });\n\n        // 创建一个缓动，按 jumpUp、jumpDown 的顺序执行动作\n        const tween = cc.tween()\n            .sequence(jumpUp, jumpDown)\n            .call(this.playJumpSound, this); // 添加一个回调函数，在前面的动作都结束时调用我们定义的 playJumpSound() 方法\n        // 重复\n        return cc.tween().repeatForever(tween);\n    }\n\n    onKeyDown (event: cc.Event.EventKeyboard) {\n        // set a flag when key pressed\n        switch (event.keyCode) {\n            case cc.macro.KEY.a:\n                this.accLeft = true;\n                break;\n            case cc.macro.KEY.d:\n                this.accRight = true;\n                break;\n        }\n    }\n\n    onKeyUp (event: cc.Event.EventKeyboard) {\n        switch (event.keyCode) {\n            case cc.macro.KEY.a:\n                this.accLeft = false;\n                break;\n            case cc.macro.KEY.d:\n                this.accRight = false;\n                break;\n        }\n    }\n\n    playJumpSound () {\n        // 调用声音引擎播放声音\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n    }\n\n}\n"]}